== Physical Plan ==
TakeOrderedAndProject (46)
+- * HashAggregate (45)
   +- Exchange (44)
      +- * HashAggregate (43)
         +- * Project (42)
            +- * SortMergeJoin Inner (41)
               :- * Project (32)
               :  +- * SortMergeJoin Inner (31)
               :     :- * Sort (22)
               :     :  +- * Project (21)
               :     :     +- * SortMergeJoin Inner (20)
               :     :        :- * Sort (14)
               :     :        :  +- Exchange (13)
               :     :        :     +- * Project (12)
               :     :        :        +- * BroadcastHashJoin Inner BuildRight (11)
               :     :        :           :- * Project (6)
               :     :        :           :  +- * BroadcastHashJoin Inner BuildRight (5)
               :     :        :           :     :- * Filter (3)
               :     :        :           :     :  +- * ColumnarToRow (2)
               :     :        :           :     :     +- Scan parquet default.store_sales (1)
               :     :        :           :     +- ReusedExchange (4)
               :     :        :           +- BroadcastExchange (10)
               :     :        :              +- * Filter (9)
               :     :        :                 +- * ColumnarToRow (8)
               :     :        :                    +- Scan parquet default.store (7)
               :     :        +- * Sort (19)
               :     :           +- Exchange (18)
               :     :              +- * Filter (17)
               :     :                 +- * ColumnarToRow (16)
               :     :                    +- Scan parquet default.item (15)
               :     +- * Sort (30)
               :        +- Exchange (29)
               :           +- * Project (28)
               :              +- * BroadcastHashJoin Inner BuildRight (27)
               :                 :- * Filter (25)
               :                 :  +- * ColumnarToRow (24)
               :                 :     +- Scan parquet default.store_returns (23)
               :                 +- ReusedExchange (26)
               +- * Sort (40)
                  +- Exchange (39)
                     +- * Project (38)
                        +- * BroadcastHashJoin Inner BuildRight (37)
                           :- * Filter (35)
                           :  +- * ColumnarToRow (34)
                           :     +- Scan parquet default.catalog_sales (33)
                           +- ReusedExchange (36)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3))

(4) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#8]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(6) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6, d_date_sk#8]

(7) Scan parquet default.store
Output [3]: [s_store_sk#9, s_store_id#10, s_store_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(8) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#9, s_store_id#10, s_store_name#11]

(9) Filter [codegen id : 2]
Input [3]: [s_store_sk#9, s_store_id#10, s_store_name#11]
Condition : isnotnull(s_store_sk#9)

(10) BroadcastExchange
Input [3]: [s_store_sk#9, s_store_id#10, s_store_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#9]
Join condition: None

(12) Project [codegen id : 3]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_profit#5, s_store_id#10, s_store_name#11]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, s_store_sk#9, s_store_id#10, s_store_name#11]

(13) Exchange
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_profit#5, s_store_id#10, s_store_name#11]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#13]

(14) Sort [codegen id : 4]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_profit#5, s_store_id#10, s_store_name#11]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(15) Scan parquet default.item
Output [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(16) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]

(17) Filter [codegen id : 5]
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Condition : isnotnull(i_item_sk#14)

(18) Exchange
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#17]

(19) Sort [codegen id : 6]
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#14]
Join condition: None

(21) Project [codegen id : 7]
Output [8]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_profit#5, s_store_id#10, s_store_name#11, i_item_id#15, i_item_desc#16]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_profit#5, s_store_id#10, s_store_name#11, i_item_sk#14, i_item_id#15, i_item_desc#16]

(22) Sort [codegen id : 7]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_profit#5, s_store_id#10, s_store_name#11, i_item_id#15, i_item_desc#16]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(23) Scan parquet default.store_returns
Output [5]: [sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21, sr_returned_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#22), dynamicpruningexpression(sr_returned_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_net_loss:decimal(7,2)>

(24) ColumnarToRow [codegen id : 9]
Input [5]: [sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21, sr_returned_date_sk#22]

(25) Filter [codegen id : 9]
Input [5]: [sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21, sr_returned_date_sk#22]
Condition : ((isnotnull(sr_customer_sk#19) AND isnotnull(sr_item_sk#18)) AND isnotnull(sr_ticket_number#20))

(26) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#24]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [sr_returned_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join condition: None

(28) Project [codegen id : 9]
Output [4]: [sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21]
Input [6]: [sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21, sr_returned_date_sk#22, d_date_sk#24]

(29) Exchange
Input [4]: [sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21]
Arguments: hashpartitioning(sr_item_sk#18, 5), ENSURE_REQUIREMENTS, [id=#25]

(30) Sort [codegen id : 10]
Input [4]: [sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21]
Arguments: [sr_customer_sk#19 ASC NULLS FIRST, sr_item_sk#18 ASC NULLS FIRST, sr_ticket_number#20 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 11]
Left keys [3]: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4]
Right keys [3]: [sr_customer_sk#19, sr_item_sk#18, sr_ticket_number#20]
Join condition: None

(32) Project [codegen id : 11]
Output [8]: [ss_net_profit#5, s_store_id#10, s_store_name#11, i_item_id#15, i_item_desc#16, sr_item_sk#18, sr_customer_sk#19, sr_net_loss#21]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_profit#5, s_store_id#10, s_store_name#11, i_item_id#15, i_item_desc#16, sr_item_sk#18, sr_customer_sk#19, sr_ticket_number#20, sr_net_loss#21]

(33) Scan parquet default.catalog_sales
Output [4]: [cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28, cs_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#29), dynamicpruningexpression(cs_sold_date_sk#29 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>

(34) ColumnarToRow [codegen id : 13]
Input [4]: [cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28, cs_sold_date_sk#29]

(35) Filter [codegen id : 13]
Input [4]: [cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28, cs_sold_date_sk#29]
Condition : (isnotnull(cs_bill_customer_sk#26) AND isnotnull(cs_item_sk#27))

(36) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#30]

(37) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#29]
Right keys [1]: [d_date_sk#30]
Join condition: None

(38) Project [codegen id : 13]
Output [3]: [cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28]
Input [5]: [cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28, cs_sold_date_sk#29, d_date_sk#30]

(39) Exchange
Input [3]: [cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28]
Arguments: hashpartitioning(cs_item_sk#27, 5), ENSURE_REQUIREMENTS, [id=#31]

(40) Sort [codegen id : 14]
Input [3]: [cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28]
Arguments: [cs_bill_customer_sk#26 ASC NULLS FIRST, cs_item_sk#27 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 15]
Left keys [2]: [sr_customer_sk#19, sr_item_sk#18]
Right keys [2]: [cs_bill_customer_sk#26, cs_item_sk#27]
Join condition: None

(42) Project [codegen id : 15]
Output [7]: [ss_net_profit#5, sr_net_loss#21, cs_net_profit#28, s_store_id#10, s_store_name#11, i_item_id#15, i_item_desc#16]
Input [11]: [ss_net_profit#5, s_store_id#10, s_store_name#11, i_item_id#15, i_item_desc#16, sr_item_sk#18, sr_customer_sk#19, sr_net_loss#21, cs_bill_customer_sk#26, cs_item_sk#27, cs_net_profit#28]

(43) HashAggregate [codegen id : 15]
Input [7]: [ss_net_profit#5, sr_net_loss#21, cs_net_profit#28, s_store_id#10, s_store_name#11, i_item_id#15, i_item_desc#16]
Keys [4]: [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11]
Functions [3]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(sr_net_loss#21)), partial_sum(UnscaledValue(cs_net_profit#28))]
Aggregate Attributes [3]: [sum#32, sum#33, sum#34]
Results [7]: [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11, sum#35, sum#36, sum#37]

(44) Exchange
Input [7]: [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11, sum#35, sum#36, sum#37]
Arguments: hashpartitioning(i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11, 5), ENSURE_REQUIREMENTS, [id=#38]

(45) HashAggregate [codegen id : 16]
Input [7]: [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11, sum#35, sum#36, sum#37]
Keys [4]: [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11]
Functions [3]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(sr_net_loss#21)), sum(UnscaledValue(cs_net_profit#28))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_net_profit#5))#39, sum(UnscaledValue(sr_net_loss#21))#40, sum(UnscaledValue(cs_net_profit#28))#41]
Results [7]: [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11, MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#39,17,2) AS store_sales_profit#42, MakeDecimal(sum(UnscaledValue(sr_net_loss#21))#40,17,2) AS store_returns_loss#43, MakeDecimal(sum(UnscaledValue(cs_net_profit#28))#41,17,2) AS catalog_sales_profit#44]

(46) TakeOrderedAndProject
Input [7]: [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11, store_sales_profit#42, store_returns_loss#43, catalog_sales_profit#44]
Arguments: 100, [i_item_id#15 ASC NULLS FIRST, i_item_desc#16 ASC NULLS FIRST, s_store_id#10 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST], [i_item_id#15, i_item_desc#16, s_store_id#10, s_store_name#11, store_sales_profit#42, store_returns_loss#43, catalog_sales_profit#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (51)
+- * Project (50)
   +- * Filter (49)
      +- * ColumnarToRow (48)
         +- Scan parquet default.date_dim (47)


(47) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#45, d_moy#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(48) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#45, d_moy#46]

(49) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#45, d_moy#46]
Condition : ((((isnotnull(d_moy#46) AND isnotnull(d_year#45)) AND (d_moy#46 = 4)) AND (d_year#45 = 2001)) AND isnotnull(d_date_sk#8))

(50) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#45, d_moy#46]

(51) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47]

Subquery:2 Hosting operator id = 23 Hosting Expression = sr_returned_date_sk#22 IN dynamicpruning#23
BroadcastExchange (56)
+- * Project (55)
   +- * Filter (54)
      +- * ColumnarToRow (53)
         +- Scan parquet default.date_dim (52)


(52) Scan parquet default.date_dim
Output [3]: [d_date_sk#24, d_year#48, d_moy#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(53) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#24, d_year#48, d_moy#49]

(54) Filter [codegen id : 1]
Input [3]: [d_date_sk#24, d_year#48, d_moy#49]
Condition : (((((isnotnull(d_moy#49) AND isnotnull(d_year#48)) AND (d_moy#49 >= 4)) AND (d_moy#49 <= 10)) AND (d_year#48 = 2001)) AND isnotnull(d_date_sk#24))

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#24]
Input [3]: [d_date_sk#24, d_year#48, d_moy#49]

(56) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50]

Subquery:3 Hosting operator id = 33 Hosting Expression = cs_sold_date_sk#29 IN dynamicpruning#23


