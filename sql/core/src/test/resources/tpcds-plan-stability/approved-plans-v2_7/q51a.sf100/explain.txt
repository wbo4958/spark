== Physical Plan ==
TakeOrderedAndProject (68)
+- * Filter (67)
   +- * HashAggregate (66)
      +- * HashAggregate (65)
         +- * Project (64)
            +- * SortMergeJoin Inner (63)
               :- Window (58)
               :  +- * Sort (57)
               :     +- Exchange (56)
               :        +- * Project (55)
               :           +- * Filter (54)
               :              +- * SortMergeJoin FullOuter (53)
               :                 :- * Sort (26)
               :                 :  +- * HashAggregate (25)
               :                 :     +- * HashAggregate (24)
               :                 :        +- * Project (23)
               :                 :           +- * SortMergeJoin Inner (22)
               :                 :              :- * Sort (15)
               :                 :              :  +- Exchange (14)
               :                 :              :     +- * Project (13)
               :                 :              :        +- Window (12)
               :                 :              :           +- * Sort (11)
               :                 :              :              +- Exchange (10)
               :                 :              :                 +- * HashAggregate (9)
               :                 :              :                    +- Exchange (8)
               :                 :              :                       +- * HashAggregate (7)
               :                 :              :                          +- * Project (6)
               :                 :              :                             +- * BroadcastHashJoin Inner BuildRight (5)
               :                 :              :                                :- * Filter (3)
               :                 :              :                                :  +- * ColumnarToRow (2)
               :                 :              :                                :     +- Scan parquet default.web_sales (1)
               :                 :              :                                +- ReusedExchange (4)
               :                 :              +- * Sort (21)
               :                 :                 +- Exchange (20)
               :                 :                    +- * Project (19)
               :                 :                       +- Window (18)
               :                 :                          +- * Sort (17)
               :                 :                             +- ReusedExchange (16)
               :                 +- * Sort (52)
               :                    +- * HashAggregate (51)
               :                       +- * HashAggregate (50)
               :                          +- * Project (49)
               :                             +- * SortMergeJoin Inner (48)
               :                                :- * Sort (41)
               :                                :  +- Exchange (40)
               :                                :     +- * Project (39)
               :                                :        +- Window (38)
               :                                :           +- * Sort (37)
               :                                :              +- Exchange (36)
               :                                :                 +- * HashAggregate (35)
               :                                :                    +- Exchange (34)
               :                                :                       +- * HashAggregate (33)
               :                                :                          +- * Project (32)
               :                                :                             +- * BroadcastHashJoin Inner BuildRight (31)
               :                                :                                :- * Filter (29)
               :                                :                                :  +- * ColumnarToRow (28)
               :                                :                                :     +- Scan parquet default.store_sales (27)
               :                                :                                +- ReusedExchange (30)
               :                                +- * Sort (47)
               :                                   +- Exchange (46)
               :                                      +- * Project (45)
               :                                         +- Window (44)
               :                                            +- * Sort (43)
               :                                               +- ReusedExchange (42)
               +- * Project (62)
                  +- Window (61)
                     +- * Sort (60)
                        +- ReusedExchange (59)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) ReusedExchange [Reuses operator id: 73]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#9]

(9) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#10]
Results [4]: [ws_item_sk#1 AS item_sk#11, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#10,17,2) AS sumws#12, ws_item_sk#1]

(10) Exchange
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#13]

(11) Sort [codegen id : 4]
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(12) Window
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#14], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(13) Project [codegen id : 5]
Output [4]: [item_sk#11, d_date#6, sumws#12, rk#14]
Input [5]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1, rk#14]

(14) Exchange
Input [4]: [item_sk#11, d_date#6, sumws#12, rk#14]
Arguments: hashpartitioning(item_sk#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(15) Sort [codegen id : 6]
Input [4]: [item_sk#11, d_date#6, sumws#12, rk#14]
Arguments: [item_sk#11 ASC NULLS FIRST], false, 0

(16) ReusedExchange [Reuses operator id: 10]
Output [4]: [item_sk#11, d_date#16, sumws#12, ws_item_sk#17]

(17) Sort [codegen id : 10]
Input [4]: [item_sk#11, d_date#16, sumws#12, ws_item_sk#17]
Arguments: [ws_item_sk#17 ASC NULLS FIRST, d_date#16 ASC NULLS FIRST], false, 0

(18) Window
Input [4]: [item_sk#11, d_date#16, sumws#12, ws_item_sk#17]
Arguments: [row_number() windowspecdefinition(ws_item_sk#17, d_date#16 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#18], [ws_item_sk#17], [d_date#16 ASC NULLS FIRST]

(19) Project [codegen id : 11]
Output [3]: [item_sk#11 AS item_sk#19, sumws#12 AS sumws#20, rk#18]
Input [5]: [item_sk#11, d_date#16, sumws#12, ws_item_sk#17, rk#18]

(20) Exchange
Input [3]: [item_sk#19, sumws#20, rk#18]
Arguments: hashpartitioning(item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#21]

(21) Sort [codegen id : 12]
Input [3]: [item_sk#19, sumws#20, rk#18]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 13]
Left keys [1]: [item_sk#11]
Right keys [1]: [item_sk#19]
Join condition: (rk#14 >= rk#18)

(23) Project [codegen id : 13]
Output [4]: [item_sk#11, d_date#6, sumws#12, sumws#20]
Input [7]: [item_sk#11, d_date#6, sumws#12, rk#14, item_sk#19, sumws#20, rk#18]

(24) HashAggregate [codegen id : 13]
Input [4]: [item_sk#11, d_date#6, sumws#12, sumws#20]
Keys [3]: [item_sk#11, d_date#6, sumws#12]
Functions [1]: [partial_sum(sumws#20)]
Aggregate Attributes [2]: [sum#22, isEmpty#23]
Results [5]: [item_sk#11, d_date#6, sumws#12, sum#24, isEmpty#25]

(25) HashAggregate [codegen id : 13]
Input [5]: [item_sk#11, d_date#6, sumws#12, sum#24, isEmpty#25]
Keys [3]: [item_sk#11, d_date#6, sumws#12]
Functions [1]: [sum(sumws#20)]
Aggregate Attributes [1]: [sum(sumws#20)#26]
Results [3]: [item_sk#11, d_date#6, sum(sumws#20)#26 AS cume_sales#27]

(26) Sort [codegen id : 13]
Input [3]: [item_sk#11, d_date#6, cume_sales#27]
Arguments: [item_sk#11 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(27) Scan parquet default.store_sales
Output [3]: [ss_item_sk#28, ss_sales_price#29, ss_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#30), dynamicpruningexpression(ss_sold_date_sk#30 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 15]
Input [3]: [ss_item_sk#28, ss_sales_price#29, ss_sold_date_sk#30]

(29) Filter [codegen id : 15]
Input [3]: [ss_item_sk#28, ss_sales_price#29, ss_sold_date_sk#30]
Condition : isnotnull(ss_item_sk#28)

(30) ReusedExchange [Reuses operator id: 73]
Output [2]: [d_date_sk#31, d_date#32]

(31) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_sold_date_sk#30]
Right keys [1]: [d_date_sk#31]
Join condition: None

(32) Project [codegen id : 15]
Output [3]: [ss_item_sk#28, ss_sales_price#29, d_date#32]
Input [5]: [ss_item_sk#28, ss_sales_price#29, ss_sold_date_sk#30, d_date_sk#31, d_date#32]

(33) HashAggregate [codegen id : 15]
Input [3]: [ss_item_sk#28, ss_sales_price#29, d_date#32]
Keys [2]: [ss_item_sk#28, d_date#32]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#29))]
Aggregate Attributes [1]: [sum#33]
Results [3]: [ss_item_sk#28, d_date#32, sum#34]

(34) Exchange
Input [3]: [ss_item_sk#28, d_date#32, sum#34]
Arguments: hashpartitioning(ss_item_sk#28, d_date#32, 5), ENSURE_REQUIREMENTS, [id=#35]

(35) HashAggregate [codegen id : 16]
Input [3]: [ss_item_sk#28, d_date#32, sum#34]
Keys [2]: [ss_item_sk#28, d_date#32]
Functions [1]: [sum(UnscaledValue(ss_sales_price#29))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#29))#36]
Results [4]: [ss_item_sk#28 AS item_sk#37, d_date#32, MakeDecimal(sum(UnscaledValue(ss_sales_price#29))#36,17,2) AS sumss#38, ss_item_sk#28]

(36) Exchange
Input [4]: [item_sk#37, d_date#32, sumss#38, ss_item_sk#28]
Arguments: hashpartitioning(ss_item_sk#28, 5), ENSURE_REQUIREMENTS, [id=#39]

(37) Sort [codegen id : 17]
Input [4]: [item_sk#37, d_date#32, sumss#38, ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST, d_date#32 ASC NULLS FIRST], false, 0

(38) Window
Input [4]: [item_sk#37, d_date#32, sumss#38, ss_item_sk#28]
Arguments: [row_number() windowspecdefinition(ss_item_sk#28, d_date#32 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#40], [ss_item_sk#28], [d_date#32 ASC NULLS FIRST]

(39) Project [codegen id : 18]
Output [4]: [item_sk#37, d_date#32, sumss#38, rk#40]
Input [5]: [item_sk#37, d_date#32, sumss#38, ss_item_sk#28, rk#40]

(40) Exchange
Input [4]: [item_sk#37, d_date#32, sumss#38, rk#40]
Arguments: hashpartitioning(item_sk#37, 5), ENSURE_REQUIREMENTS, [id=#41]

(41) Sort [codegen id : 19]
Input [4]: [item_sk#37, d_date#32, sumss#38, rk#40]
Arguments: [item_sk#37 ASC NULLS FIRST], false, 0

(42) ReusedExchange [Reuses operator id: 36]
Output [4]: [item_sk#37, d_date#42, sumss#38, ss_item_sk#43]

(43) Sort [codegen id : 23]
Input [4]: [item_sk#37, d_date#42, sumss#38, ss_item_sk#43]
Arguments: [ss_item_sk#43 ASC NULLS FIRST, d_date#42 ASC NULLS FIRST], false, 0

(44) Window
Input [4]: [item_sk#37, d_date#42, sumss#38, ss_item_sk#43]
Arguments: [row_number() windowspecdefinition(ss_item_sk#43, d_date#42 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#44], [ss_item_sk#43], [d_date#42 ASC NULLS FIRST]

(45) Project [codegen id : 24]
Output [3]: [item_sk#37 AS item_sk#45, sumss#38 AS sumss#46, rk#44]
Input [5]: [item_sk#37, d_date#42, sumss#38, ss_item_sk#43, rk#44]

(46) Exchange
Input [3]: [item_sk#45, sumss#46, rk#44]
Arguments: hashpartitioning(item_sk#45, 5), ENSURE_REQUIREMENTS, [id=#47]

(47) Sort [codegen id : 25]
Input [3]: [item_sk#45, sumss#46, rk#44]
Arguments: [item_sk#45 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 26]
Left keys [1]: [item_sk#37]
Right keys [1]: [item_sk#45]
Join condition: (rk#40 >= rk#44)

(49) Project [codegen id : 26]
Output [4]: [item_sk#37, d_date#32, sumss#38, sumss#46]
Input [7]: [item_sk#37, d_date#32, sumss#38, rk#40, item_sk#45, sumss#46, rk#44]

(50) HashAggregate [codegen id : 26]
Input [4]: [item_sk#37, d_date#32, sumss#38, sumss#46]
Keys [3]: [item_sk#37, d_date#32, sumss#38]
Functions [1]: [partial_sum(sumss#46)]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [5]: [item_sk#37, d_date#32, sumss#38, sum#50, isEmpty#51]

(51) HashAggregate [codegen id : 26]
Input [5]: [item_sk#37, d_date#32, sumss#38, sum#50, isEmpty#51]
Keys [3]: [item_sk#37, d_date#32, sumss#38]
Functions [1]: [sum(sumss#46)]
Aggregate Attributes [1]: [sum(sumss#46)#52]
Results [3]: [item_sk#37, d_date#32, sum(sumss#46)#52 AS cume_sales#53]

(52) Sort [codegen id : 26]
Input [3]: [item_sk#37, d_date#32, cume_sales#53]
Arguments: [item_sk#37 ASC NULLS FIRST, d_date#32 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 27]
Left keys [2]: [item_sk#11, d_date#6]
Right keys [2]: [item_sk#37, d_date#32]
Join condition: None

(54) Filter [codegen id : 27]
Input [6]: [item_sk#11, d_date#6, cume_sales#27, item_sk#37, d_date#32, cume_sales#53]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#37 END)

(55) Project [codegen id : 27]
Output [4]: [CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#37 END AS item_sk#54, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#32 END AS d_date#55, cume_sales#27 AS web_sales#56, cume_sales#53 AS store_sales#57]
Input [6]: [item_sk#11, d_date#6, cume_sales#27, item_sk#37, d_date#32, cume_sales#53]

(56) Exchange
Input [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]
Arguments: hashpartitioning(item_sk#54, 5), ENSURE_REQUIREMENTS, [id=#58]

(57) Sort [codegen id : 28]
Input [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]
Arguments: [item_sk#54 ASC NULLS FIRST, d_date#55 ASC NULLS FIRST], false, 0

(58) Window
Input [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]
Arguments: [row_number() windowspecdefinition(item_sk#54, d_date#55 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#59], [item_sk#54], [d_date#55 ASC NULLS FIRST]

(59) ReusedExchange [Reuses operator id: 56]
Output [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]

(60) Sort [codegen id : 56]
Input [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]
Arguments: [item_sk#54 ASC NULLS FIRST, d_date#55 ASC NULLS FIRST], false, 0

(61) Window
Input [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]
Arguments: [row_number() windowspecdefinition(item_sk#54, d_date#55 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#60], [item_sk#54], [d_date#55 ASC NULLS FIRST]

(62) Project [codegen id : 57]
Output [4]: [item_sk#54 AS item_sk#61, web_sales#56 AS web_sales#62, store_sales#57 AS store_sales#63, rk#60]
Input [5]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, rk#60]

(63) SortMergeJoin [codegen id : 58]
Left keys [1]: [item_sk#54]
Right keys [1]: [item_sk#61]
Join condition: (rk#59 >= rk#60)

(64) Project [codegen id : 58]
Output [6]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, web_sales#62, store_sales#63]
Input [9]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, rk#59, item_sk#61, web_sales#62, store_sales#63, rk#60]

(65) HashAggregate [codegen id : 58]
Input [6]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, web_sales#62, store_sales#63]
Keys [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]
Functions [2]: [partial_max(web_sales#62), partial_max(store_sales#63)]
Aggregate Attributes [2]: [max#64, max#65]
Results [6]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, max#66, max#67]

(66) HashAggregate [codegen id : 58]
Input [6]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, max#66, max#67]
Keys [4]: [item_sk#54, d_date#55, web_sales#56, store_sales#57]
Functions [2]: [max(web_sales#62), max(store_sales#63)]
Aggregate Attributes [2]: [max(web_sales#62)#68, max(store_sales#63)#69]
Results [6]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, max(web_sales#62)#68 AS web_cumulative#70, max(store_sales#63)#69 AS store_cumulative#71]

(67) Filter [codegen id : 58]
Input [6]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, web_cumulative#70, store_cumulative#71]
Condition : ((isnotnull(web_cumulative#70) AND isnotnull(store_cumulative#71)) AND (web_cumulative#70 > store_cumulative#71))

(68) TakeOrderedAndProject
Input [6]: [item_sk#54, d_date#55, web_sales#56, store_sales#57, web_cumulative#70, store_cumulative#71]
Arguments: 100, [item_sk#54 ASC NULLS FIRST, d_date#55 ASC NULLS FIRST], [item_sk#54, d_date#55, web_sales#56, store_sales#57, web_cumulative#70, store_cumulative#71]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (73)
+- * Project (72)
   +- * Filter (71)
      +- * ColumnarToRow (70)
         +- Scan parquet default.date_dim (69)


(69) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(70) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#72]

(71) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#72]
Condition : (((isnotnull(d_month_seq#72) AND (d_month_seq#72 >= 1212)) AND (d_month_seq#72 <= 1223)) AND isnotnull(d_date_sk#5))

(72) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#72]

(73) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73]

Subquery:2 Hosting operator id = 27 Hosting Expression = ss_sold_date_sk#30 IN dynamicpruning#4


