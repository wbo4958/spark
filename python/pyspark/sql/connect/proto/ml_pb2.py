#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spark/connect/ml.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from pyspark.sql.connect.proto import expressions_pb2 as spark_dot_connect_dot_expressions__pb2
from pyspark.sql.connect.proto import relations_pb2 as spark_dot_connect_dot_relations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x16spark/connect/ml.proto\x12\rspark.connect\x1a\x1fspark/connect/expressions.proto\x1a\x1dspark/connect/relations.proto"\xa5\x01\n\x08MlParams\x12;\n\x06params\x18\x01 \x03(\x0b\x32#.spark.connect.MlParams.ParamsEntryR\x06params\x1a\\\n\x0bParamsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x37\n\x05value\x18\x02 \x01(\x0b\x32!.spark.connect.Expression.LiteralR\x05value:\x02\x38\x01"\xd2\x01\n\x07MlStage\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12/\n\x06params\x18\x02 \x01(\x0b\x32\x17.spark.connect.MlParamsR\x06params\x12\x10\n\x03uid\x18\x03 \x01(\tR\x03uid\x12\x34\n\x04type\x18\x04 \x01(\x0e\x32 .spark.connect.MlStage.StageTypeR\x04type":\n\tStageType\x12\x0f\n\x0bUNSPECIFIED\x10\x00\x12\r\n\tESTIMATOR\x10\x01\x12\r\n\tEVALUATOR\x10\x02"\xf1\x02\n\tMlCommand\x12\x30\n\x03\x66it\x18\x01 \x01(\x0b\x32\x1c.spark.connect.MlCommand.FitH\x00R\x03\x66it\x12S\n\x10\x66\x65tch_model_attr\x18\x02 \x01(\x0b\x32\'.spark.connect.MlCommand.FetchModelAttrH\x00R\x0e\x66\x65tchModelAttr\x1an\n\x03\x46it\x12\x34\n\testimator\x18\x01 \x01(\x0b\x32\x16.spark.connect.MlStageR\testimator\x12\x31\n\x07\x64\x61taset\x18\x02 \x01(\x0b\x32\x17.spark.connect.RelationR\x07\x64\x61taset\x1aZ\n\x0e\x46\x65tchModelAttr\x12\x34\n\tmodel_ref\x18\x01 \x01(\x0b\x32\x17.spark.connect.ModelRefR\x08modelRef\x12\x12\n\x04name\x18\x02 \x01(\tR\x04nameB\x11\n\x0fml_command_type"\x97\x04\n\x11MlCommandResponse\x12=\n\x07literal\x18\x01 \x01(\x0b\x32!.spark.connect.Expression.LiteralH\x00R\x07literal\x12K\n\nmodel_info\x18\x02 \x01(\x0b\x32*.spark.connect.MlCommandResponse.ModelInfoH\x00R\tmodelInfo\x12/\n\x06vector\x18\x03 \x01(\x0b\x32\x15.spark.connect.VectorH\x00R\x06vector\x12/\n\x06matrix\x18\x04 \x01(\x0b\x32\x15.spark.connect.MatrixH\x00R\x06matrix\x12.\n\x05stage\x18\x05 \x01(\x0b\x32\x16.spark.connect.MlStageH\x00R\x05stage\x12\x36\n\tmodel_ref\x18\x06 \x01(\x0b\x32\x17.spark.connect.ModelRefH\x00R\x08modelRef\x1a\x8f\x01\n\tModelInfo\x12\x34\n\tmodel_ref\x18\x01 \x01(\x0b\x32\x17.spark.connect.ModelRefR\x08modelRef\x12\x1b\n\tmodel_uid\x18\x02 \x01(\tR\x08modelUid\x12/\n\x06params\x18\x03 \x01(\x0b\x32\x17.spark.connect.MlParamsR\x06paramsB\x1a\n\x18ml_command_response_type"\x1a\n\x08ModelRef\x12\x0e\n\x02id\x18\x01 \x01(\tR\x02id"\xe8\x01\n\x06Vector\x12\x33\n\x05\x64\x65nse\x18\x01 \x01(\x0b\x32\x1b.spark.connect.Vector.DenseH\x00R\x05\x64\x65nse\x12\x36\n\x06sparse\x18\x02 \x01(\x0b\x32\x1c.spark.connect.Vector.SparseH\x00R\x06sparse\x1a\x1d\n\x05\x44\x65nse\x12\x14\n\x05value\x18\x01 \x03(\x01R\x05value\x1aH\n\x06Sparse\x12\x12\n\x04size\x18\x01 \x01(\x05R\x04size\x12\x14\n\x05index\x18\x02 \x03(\x01R\x05index\x12\x14\n\x05value\x18\x03 \x03(\x01R\x05valueB\x08\n\x06one_of"\xaa\x03\n\x06Matrix\x12\x33\n\x05\x64\x65nse\x18\x01 \x01(\x0b\x32\x1b.spark.connect.Matrix.DenseH\x00R\x05\x64\x65nse\x12\x36\n\x06sparse\x18\x02 \x01(\x0b\x32\x1c.spark.connect.Matrix.SparseH\x00R\x06sparse\x1ax\n\x05\x44\x65nse\x12\x19\n\x08num_rows\x18\x01 \x01(\x05R\x07numRows\x12\x19\n\x08num_cols\x18\x02 \x01(\x05R\x07numCols\x12\x14\n\x05value\x18\x03 \x03(\x01R\x05value\x12#\n\ris_transposed\x18\x04 \x01(\x08R\x0cisTransposed\x1a\xae\x01\n\x06Sparse\x12\x19\n\x08num_rows\x18\x01 \x01(\x05R\x07numRows\x12\x19\n\x08num_cols\x18\x02 \x01(\x05R\x07numCols\x12\x16\n\x06\x63olptr\x18\x03 \x03(\x01R\x06\x63olptr\x12\x1b\n\trow_index\x18\x04 \x03(\x01R\x08rowIndex\x12\x14\n\x05value\x18\x05 \x03(\x01R\x05value\x12#\n\ris_transposed\x18\x06 \x01(\x08R\x0cisTransposedB\x08\n\x06one_ofB"\n\x1eorg.apache.spark.connect.protoP\x01\x62\x06proto3'
)

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "pyspark.sql.connect.proto.ml_pb2", globals())
if _descriptor._USE_C_DESCRIPTORS == False:
    DESCRIPTOR._options = None
    DESCRIPTOR._serialized_options = b"\n\036org.apache.spark.connect.protoP\001"
    _MLPARAMS_PARAMSENTRY._options = None
    _MLPARAMS_PARAMSENTRY._serialized_options = b"8\001"
    _MLPARAMS._serialized_start = 106
    _MLPARAMS._serialized_end = 271
    _MLPARAMS_PARAMSENTRY._serialized_start = 179
    _MLPARAMS_PARAMSENTRY._serialized_end = 271
    _MLSTAGE._serialized_start = 274
    _MLSTAGE._serialized_end = 484
    _MLSTAGE_STAGETYPE._serialized_start = 426
    _MLSTAGE_STAGETYPE._serialized_end = 484
    _MLCOMMAND._serialized_start = 487
    _MLCOMMAND._serialized_end = 856
    _MLCOMMAND_FIT._serialized_start = 635
    _MLCOMMAND_FIT._serialized_end = 745
    _MLCOMMAND_FETCHMODELATTR._serialized_start = 747
    _MLCOMMAND_FETCHMODELATTR._serialized_end = 837
    _MLCOMMANDRESPONSE._serialized_start = 859
    _MLCOMMANDRESPONSE._serialized_end = 1394
    _MLCOMMANDRESPONSE_MODELINFO._serialized_start = 1223
    _MLCOMMANDRESPONSE_MODELINFO._serialized_end = 1366
    _MODELREF._serialized_start = 1396
    _MODELREF._serialized_end = 1422
    _VECTOR._serialized_start = 1425
    _VECTOR._serialized_end = 1657
    _VECTOR_DENSE._serialized_start = 1544
    _VECTOR_DENSE._serialized_end = 1573
    _VECTOR_SPARSE._serialized_start = 1575
    _VECTOR_SPARSE._serialized_end = 1647
    _MATRIX._serialized_start = 1660
    _MATRIX._serialized_end = 2086
    _MATRIX_DENSE._serialized_start = 1779
    _MATRIX_DENSE._serialized_end = 1899
    _MATRIX_SPARSE._serialized_start = 1902
    _MATRIX_SPARSE._serialized_end = 2076
# @@protoc_insertion_point(module_scope)
