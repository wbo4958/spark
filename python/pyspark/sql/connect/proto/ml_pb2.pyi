#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import pyspark.sql.connect.proto.expressions_pb2
import pyspark.sql.connect.proto.relations_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class MlParams(google.protobuf.message.Message):
    """MlParams stores param settings for
    ML Estimator / Transformer / Model / Evaluator
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class ParamsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> pyspark.sql.connect.proto.expressions_pb2.Expression.Literal: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: pyspark.sql.connect.proto.expressions_pb2.Expression.Literal | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["value", b"value"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    PARAMS_FIELD_NUMBER: builtins.int
    @property
    def params(
        self,
    ) -> google.protobuf.internal.containers.MessageMap[
        builtins.str, pyspark.sql.connect.proto.expressions_pb2.Expression.Literal
    ]:
        """user-supplied params"""
    def __init__(
        self,
        *,
        params: collections.abc.Mapping[
            builtins.str, pyspark.sql.connect.proto.expressions_pb2.Expression.Literal
        ]
        | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["params", b"params"]) -> None: ...

global___MlParams = MlParams

class MlStage(google.protobuf.message.Message):
    """MlStage stores ML stage data (Estimator or Evaluator)"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _StageType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StageTypeEnumTypeWrapper(
        google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[MlStage._StageType.ValueType],
        builtins.type,
    ):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNSPECIFIED: MlStage._StageType.ValueType  # 0
        ESTIMATOR: MlStage._StageType.ValueType  # 1
        EVALUATOR: MlStage._StageType.ValueType  # 2

    class StageType(_StageType, metaclass=_StageTypeEnumTypeWrapper): ...
    UNSPECIFIED: MlStage.StageType.ValueType  # 0
    ESTIMATOR: MlStage.StageType.ValueType  # 1
    EVALUATOR: MlStage.StageType.ValueType  # 2

    NAME_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the stage in the registry"""
    @property
    def params(self) -> global___MlParams:
        """param settings for the stage"""
    uid: builtins.str
    """unique id of the stage"""
    type: global___MlStage.StageType.ValueType
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        params: global___MlParams | None = ...,
        uid: builtins.str = ...,
        type: global___MlStage.StageType.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["params", b"params"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "name", b"name", "params", b"params", "type", b"type", "uid", b"uid"
        ],
    ) -> None: ...

global___MlStage = MlStage

class MlCommand(google.protobuf.message.Message):
    """a MlCommand is a type container that has exactly one ML command set"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Fit(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ESTIMATOR_FIELD_NUMBER: builtins.int
        DATASET_FIELD_NUMBER: builtins.int
        @property
        def estimator(self) -> global___MlStage: ...
        @property
        def dataset(self) -> pyspark.sql.connect.proto.relations_pb2.Relation: ...
        def __init__(
            self,
            *,
            estimator: global___MlStage | None = ...,
            dataset: pyspark.sql.connect.proto.relations_pb2.Relation | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> None: ...

    class FetchModelAttr(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> global___ModelRef: ...
        name: builtins.str
        def __init__(
            self,
            *,
            model_ref: global___ModelRef | None = ...,
            name: builtins.str = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref", "name", b"name"]
        ) -> None: ...

    FIT_FIELD_NUMBER: builtins.int
    FETCH_MODEL_ATTR_FIELD_NUMBER: builtins.int
    @property
    def fit(self) -> global___MlCommand.Fit:
        """call `estimator.fit` and returns a model"""
    @property
    def fetch_model_attr(self) -> global___MlCommand.FetchModelAttr: ...
    def __init__(
        self,
        *,
        fit: global___MlCommand.Fit | None = ...,
        fetch_model_attr: global___MlCommand.FetchModelAttr | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "fetch_model_attr",
            b"fetch_model_attr",
            "fit",
            b"fit",
            "ml_command_type",
            b"ml_command_type",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "fetch_model_attr",
            b"fetch_model_attr",
            "fit",
            b"fit",
            "ml_command_type",
            b"ml_command_type",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["ml_command_type", b"ml_command_type"]
    ) -> typing_extensions.Literal["fit", "fetch_model_attr"] | None: ...

global___MlCommand = MlCommand

class MlCommandResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class ModelInfo(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        MODEL_UID_FIELD_NUMBER: builtins.int
        PARAMS_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> global___ModelRef: ...
        model_uid: builtins.str
        @property
        def params(self) -> global___MlParams: ...
        def __init__(
            self,
            *,
            model_ref: global___ModelRef | None = ...,
            model_uid: builtins.str = ...,
            params: global___MlParams | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal["model_ref", b"model_ref", "params", b"params"],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref", b"model_ref", "model_uid", b"model_uid", "params", b"params"
            ],
        ) -> None: ...

    LITERAL_FIELD_NUMBER: builtins.int
    MODEL_INFO_FIELD_NUMBER: builtins.int
    VECTOR_FIELD_NUMBER: builtins.int
    MATRIX_FIELD_NUMBER: builtins.int
    STAGE_FIELD_NUMBER: builtins.int
    MODEL_REF_FIELD_NUMBER: builtins.int
    @property
    def literal(self) -> pyspark.sql.connect.proto.expressions_pb2.Expression.Literal: ...
    @property
    def model_info(self) -> global___MlCommandResponse.ModelInfo: ...
    @property
    def vector(self) -> global___Vector: ...
    @property
    def matrix(self) -> global___Matrix: ...
    @property
    def stage(self) -> global___MlStage: ...
    @property
    def model_ref(self) -> global___ModelRef: ...
    def __init__(
        self,
        *,
        literal: pyspark.sql.connect.proto.expressions_pb2.Expression.Literal | None = ...,
        model_info: global___MlCommandResponse.ModelInfo | None = ...,
        vector: global___Vector | None = ...,
        matrix: global___Matrix | None = ...,
        stage: global___MlStage | None = ...,
        model_ref: global___ModelRef | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_info",
            b"model_info",
            "model_ref",
            b"model_ref",
            "stage",
            b"stage",
            "vector",
            b"vector",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_info",
            b"model_info",
            "model_ref",
            b"model_ref",
            "stage",
            b"stage",
            "vector",
            b"vector",
        ],
    ) -> None: ...
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "ml_command_response_type", b"ml_command_response_type"
        ],
    ) -> (
        typing_extensions.Literal["literal", "model_info", "vector", "matrix", "stage", "model_ref"]
        | None
    ): ...

global___MlCommandResponse = MlCommandResponse

class ModelRef(google.protobuf.message.Message):
    """ModelRef represents a reference to server side `Model` instance"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    """The ID is used to lookup the model instance in server side."""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id", b"id"]) -> None: ...

global___ModelRef = ModelRef

class Vector(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Dense(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VALUE_FIELD_NUMBER: builtins.int
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        def __init__(
            self,
            *,
            value: collections.abc.Iterable[builtins.float] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["value", b"value"]) -> None: ...

    class Sparse(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SIZE_FIELD_NUMBER: builtins.int
        INDEX_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        size: builtins.int
        @property
        def index(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        def __init__(
            self,
            *,
            size: builtins.int = ...,
            index: collections.abc.Iterable[builtins.float] | None = ...,
            value: collections.abc.Iterable[builtins.float] | None = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "index", b"index", "size", b"size", "value", b"value"
            ],
        ) -> None: ...

    DENSE_FIELD_NUMBER: builtins.int
    SPARSE_FIELD_NUMBER: builtins.int
    @property
    def dense(self) -> global___Vector.Dense: ...
    @property
    def sparse(self) -> global___Vector.Sparse: ...
    def __init__(
        self,
        *,
        dense: global___Vector.Dense | None = ...,
        sparse: global___Vector.Sparse | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["one_of", b"one_of"]
    ) -> typing_extensions.Literal["dense", "sparse"] | None: ...

global___Vector = Vector

class Matrix(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Dense(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NUM_ROWS_FIELD_NUMBER: builtins.int
        NUM_COLS_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        IS_TRANSPOSED_FIELD_NUMBER: builtins.int
        num_rows: builtins.int
        num_cols: builtins.int
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        is_transposed: builtins.bool
        def __init__(
            self,
            *,
            num_rows: builtins.int = ...,
            num_cols: builtins.int = ...,
            value: collections.abc.Iterable[builtins.float] | None = ...,
            is_transposed: builtins.bool = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "is_transposed",
                b"is_transposed",
                "num_cols",
                b"num_cols",
                "num_rows",
                b"num_rows",
                "value",
                b"value",
            ],
        ) -> None: ...

    class Sparse(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NUM_ROWS_FIELD_NUMBER: builtins.int
        NUM_COLS_FIELD_NUMBER: builtins.int
        COLPTR_FIELD_NUMBER: builtins.int
        ROW_INDEX_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        IS_TRANSPOSED_FIELD_NUMBER: builtins.int
        num_rows: builtins.int
        num_cols: builtins.int
        @property
        def colptr(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        @property
        def row_index(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        is_transposed: builtins.bool
        def __init__(
            self,
            *,
            num_rows: builtins.int = ...,
            num_cols: builtins.int = ...,
            colptr: collections.abc.Iterable[builtins.float] | None = ...,
            row_index: collections.abc.Iterable[builtins.float] | None = ...,
            value: collections.abc.Iterable[builtins.float] | None = ...,
            is_transposed: builtins.bool = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "colptr",
                b"colptr",
                "is_transposed",
                b"is_transposed",
                "num_cols",
                b"num_cols",
                "num_rows",
                b"num_rows",
                "row_index",
                b"row_index",
                "value",
                b"value",
            ],
        ) -> None: ...

    DENSE_FIELD_NUMBER: builtins.int
    SPARSE_FIELD_NUMBER: builtins.int
    @property
    def dense(self) -> global___Matrix.Dense: ...
    @property
    def sparse(self) -> global___Matrix.Sparse: ...
    def __init__(
        self,
        *,
        dense: global___Matrix.Dense | None = ...,
        sparse: global___Matrix.Sparse | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["one_of", b"one_of"]
    ) -> typing_extensions.Literal["dense", "sparse"] | None: ...

global___Matrix = Matrix
