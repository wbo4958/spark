#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import pyspark.sql.connect.proto.expressions_pb2
import pyspark.sql.connect.proto.ml_common_pb2
import pyspark.sql.connect.proto.relations_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class MlCommand(google.protobuf.message.Message):
    """Command for ML"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Fit(google.protobuf.message.Message):
        """Command for estimator.fit(dataset)"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ESTIMATOR_FIELD_NUMBER: builtins.int
        PARAMS_FIELD_NUMBER: builtins.int
        DATASET_FIELD_NUMBER: builtins.int
        @property
        def estimator(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlOperator: ...
        @property
        def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams: ...
        @property
        def dataset(self) -> pyspark.sql.connect.proto.relations_pb2.Relation: ...
        def __init__(
            self,
            *,
            estimator: pyspark.sql.connect.proto.ml_common_pb2.MlOperator | None = ...,
            params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
            dataset: pyspark.sql.connect.proto.relations_pb2.Relation | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal[
                "dataset", b"dataset", "estimator", b"estimator", "params", b"params"
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "dataset", b"dataset", "estimator", b"estimator", "params", b"params"
            ],
        ) -> None: ...

    class DeleteModel(google.protobuf.message.Message):
        """Command to delete a cached model."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> None: ...

    class Writer(google.protobuf.message.Message):
        """Command to write ML operator"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class OptionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        OPERATOR_FIELD_NUMBER: builtins.int
        MODEL_REF_FIELD_NUMBER: builtins.int
        PARAMS_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        SHOULD_OVERWRITE_FIELD_NUMBER: builtins.int
        OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def operator(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlOperator: ...
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        @property
        def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams: ...
        path: builtins.str
        should_overwrite: builtins.bool
        @property
        def options(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
        def __init__(
            self,
            *,
            operator: pyspark.sql.connect.proto.ml_common_pb2.MlOperator | None = ...,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
            params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
            path: builtins.str = ...,
            should_overwrite: builtins.bool = ...,
            options: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref",
                b"model_ref",
                "operator",
                b"operator",
                "params",
                b"params",
                "type",
                b"type",
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref",
                b"model_ref",
                "operator",
                b"operator",
                "options",
                b"options",
                "params",
                b"params",
                "path",
                b"path",
                "should_overwrite",
                b"should_overwrite",
                "type",
                b"type",
            ],
        ) -> None: ...
        def WhichOneof(
            self, oneof_group: typing_extensions.Literal["type", b"type"]
        ) -> typing_extensions.Literal["operator", "model_ref"] | None: ...

    class Reader(google.protobuf.message.Message):
        """Command to load ML operator."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        CLAZZ_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        clazz: builtins.str
        path: builtins.str
        def __init__(
            self,
            *,
            clazz: builtins.str = ...,
            path: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["clazz", b"clazz", "path", b"path"]
        ) -> None: ...

    FIT_FIELD_NUMBER: builtins.int
    FETCH_MODEL_ATTR_FIELD_NUMBER: builtins.int
    DELETE_MODEL_FIELD_NUMBER: builtins.int
    WRITE_FIELD_NUMBER: builtins.int
    READ_FIELD_NUMBER: builtins.int
    @property
    def fit(self) -> global___MlCommand.Fit: ...
    @property
    def fetch_model_attr(self) -> pyspark.sql.connect.proto.relations_pb2.FetchModelAttr: ...
    @property
    def delete_model(self) -> global___MlCommand.DeleteModel: ...
    @property
    def write(self) -> global___MlCommand.Writer: ...
    @property
    def read(self) -> global___MlCommand.Reader: ...
    def __init__(
        self,
        *,
        fit: global___MlCommand.Fit | None = ...,
        fetch_model_attr: pyspark.sql.connect.proto.relations_pb2.FetchModelAttr | None = ...,
        delete_model: global___MlCommand.DeleteModel | None = ...,
        write: global___MlCommand.Writer | None = ...,
        read: global___MlCommand.Reader | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "command",
            b"command",
            "delete_model",
            b"delete_model",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fit",
            b"fit",
            "read",
            b"read",
            "write",
            b"write",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "command",
            b"command",
            "delete_model",
            b"delete_model",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fit",
            b"fit",
            "read",
            b"read",
            "write",
            b"write",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["command", b"command"]
    ) -> (
        typing_extensions.Literal["fit", "fetch_model_attr", "delete_model", "write", "read"] | None
    ): ...

global___MlCommand = MlCommand

class MlCommandResponse(google.protobuf.message.Message):
    """The response of MlCommand"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class MlOperatorInfo(google.protobuf.message.Message):
        """Represent an operator info"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        UID_FIELD_NUMBER: builtins.int
        PARAMS_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef:
            """cached model"""
        name: builtins.str
        """Operator name"""
        uid: builtins.str
        @property
        def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams: ...
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
            name: builtins.str = ...,
            uid: builtins.str = ...,
            params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref", b"model_ref", "name", b"name", "params", b"params", "type", b"type"
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref",
                b"model_ref",
                "name",
                b"name",
                "params",
                b"params",
                "type",
                b"type",
                "uid",
                b"uid",
            ],
        ) -> None: ...
        def WhichOneof(
            self, oneof_group: typing_extensions.Literal["type", b"type"]
        ) -> typing_extensions.Literal["model_ref", "name"] | None: ...

    LITERAL_FIELD_NUMBER: builtins.int
    VECTOR_FIELD_NUMBER: builtins.int
    MATRIX_FIELD_NUMBER: builtins.int
    MODEL_ATTRIBUTE_FIELD_NUMBER: builtins.int
    OPERATOR_INFO_FIELD_NUMBER: builtins.int
    @property
    def literal(self) -> pyspark.sql.connect.proto.expressions_pb2.Expression.Literal: ...
    @property
    def vector(self) -> pyspark.sql.connect.proto.ml_common_pb2.Vector: ...
    @property
    def matrix(self) -> pyspark.sql.connect.proto.ml_common_pb2.Matrix: ...
    model_attribute: builtins.str
    """model_attribute represents an intermediate result, like CACHED_MODEL_ID.summary"""
    @property
    def operator_info(self) -> global___MlCommandResponse.MlOperatorInfo: ...
    def __init__(
        self,
        *,
        literal: pyspark.sql.connect.proto.expressions_pb2.Expression.Literal | None = ...,
        vector: pyspark.sql.connect.proto.ml_common_pb2.Vector | None = ...,
        matrix: pyspark.sql.connect.proto.ml_common_pb2.Matrix | None = ...,
        model_attribute: builtins.str = ...,
        operator_info: global___MlCommandResponse.MlOperatorInfo | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "model_attribute",
            b"model_attribute",
            "operator_info",
            b"operator_info",
            "response_type",
            b"response_type",
            "vector",
            b"vector",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "model_attribute",
            b"model_attribute",
            "operator_info",
            b"operator_info",
            "response_type",
            b"response_type",
            "vector",
            b"vector",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["response_type", b"response_type"]
    ) -> (
        typing_extensions.Literal["literal", "vector", "matrix", "model_attribute", "operator_info"]
        | None
    ): ...

global___MlCommandResponse = MlCommandResponse
