#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import pyspark.sql.connect.proto.expressions_pb2
import pyspark.sql.connect.proto.ml_common_pb2
import pyspark.sql.connect.proto.relations_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class MlCommand(google.protobuf.message.Message):
    """Command for ML"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Fit(google.protobuf.message.Message):
        """Command for estimator.fit(dataset)"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ESTIMATOR_FIELD_NUMBER: builtins.int
        DATASET_FIELD_NUMBER: builtins.int
        @property
        def estimator(self) -> global___MlStage: ...
        @property
        def dataset(self) -> pyspark.sql.connect.proto.relations_pb2.Relation: ...
        def __init__(
            self,
            *,
            estimator: global___MlStage | None = ...,
            dataset: pyspark.sql.connect.proto.relations_pb2.Relation | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> None: ...

    class DeleteModel(google.protobuf.message.Message):
        """Command to delete a cached model"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> None: ...

    FIT_FIELD_NUMBER: builtins.int
    FETCH_MODEL_ATTR_FIELD_NUMBER: builtins.int
    DELETE_MODEL_FIELD_NUMBER: builtins.int
    @property
    def fit(self) -> global___MlCommand.Fit: ...
    @property
    def fetch_model_attr(self) -> pyspark.sql.connect.proto.relations_pb2.FetchModelAttr: ...
    @property
    def delete_model(self) -> global___MlCommand.DeleteModel: ...
    def __init__(
        self,
        *,
        fit: global___MlCommand.Fit | None = ...,
        fetch_model_attr: pyspark.sql.connect.proto.relations_pb2.FetchModelAttr | None = ...,
        delete_model: global___MlCommand.DeleteModel | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "delete_model",
            b"delete_model",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fit",
            b"fit",
            "ml_command_type",
            b"ml_command_type",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "delete_model",
            b"delete_model",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fit",
            b"fit",
            "ml_command_type",
            b"ml_command_type",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["ml_command_type", b"ml_command_type"]
    ) -> typing_extensions.Literal["fit", "fetch_model_attr", "delete_model"] | None: ...

global___MlCommand = MlCommand

class MlStage(google.protobuf.message.Message):
    """MlStage stores ML stage data (Estimator or Evaluator)"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _StageType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StageTypeEnumTypeWrapper(
        google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[MlStage._StageType.ValueType],
        builtins.type,
    ):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNSPECIFIED: MlStage._StageType.ValueType  # 0
        ESTIMATOR: MlStage._StageType.ValueType  # 1
        EVALUATOR: MlStage._StageType.ValueType  # 2

    class StageType(_StageType, metaclass=_StageTypeEnumTypeWrapper): ...
    UNSPECIFIED: MlStage.StageType.ValueType  # 0
    ESTIMATOR: MlStage.StageType.ValueType  # 1
    EVALUATOR: MlStage.StageType.ValueType  # 2

    NAME_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the stage in the registry"""
    @property
    def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams:
        """param settings for the stage"""
    uid: builtins.str
    """unique id of the stage"""
    type: global___MlStage.StageType.ValueType
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
        uid: builtins.str = ...,
        type: global___MlStage.StageType.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["params", b"params"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "name", b"name", "params", b"params", "type", b"type", "uid", b"uid"
        ],
    ) -> None: ...

global___MlStage = MlStage

class MlCommandResponse(google.protobuf.message.Message):
    """The response of MlCommand"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LITERAL_FIELD_NUMBER: builtins.int
    VECTOR_FIELD_NUMBER: builtins.int
    MATRIX_FIELD_NUMBER: builtins.int
    MODEL_REF_FIELD_NUMBER: builtins.int
    IS_DATAFRAME_FIELD_NUMBER: builtins.int
    @property
    def literal(self) -> pyspark.sql.connect.proto.expressions_pb2.Expression.Literal: ...
    @property
    def vector(self) -> pyspark.sql.connect.proto.ml_common_pb2.Vector: ...
    @property
    def matrix(self) -> pyspark.sql.connect.proto.ml_common_pb2.Matrix: ...
    @property
    def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
    is_dataframe: builtins.bool
    def __init__(
        self,
        *,
        literal: pyspark.sql.connect.proto.expressions_pb2.Expression.Literal | None = ...,
        vector: pyspark.sql.connect.proto.ml_common_pb2.Vector | None = ...,
        matrix: pyspark.sql.connect.proto.ml_common_pb2.Matrix | None = ...,
        model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
        is_dataframe: builtins.bool = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "is_dataframe",
            b"is_dataframe",
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_ref",
            b"model_ref",
            "vector",
            b"vector",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "is_dataframe",
            b"is_dataframe",
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_ref",
            b"model_ref",
            "vector",
            b"vector",
        ],
    ) -> None: ...
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "ml_command_response_type", b"ml_command_response_type"
        ],
    ) -> (
        typing_extensions.Literal["literal", "vector", "matrix", "model_ref", "is_dataframe"] | None
    ): ...

global___MlCommandResponse = MlCommandResponse
