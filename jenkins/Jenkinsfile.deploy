/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

pipeline {
    agent any
    triggers {
        cron('H 0 * * *')
    }

    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 6, unit: 'HOURS')
        gitLabConnection('GitLab Master')
    }

    stages {
        stage('Build') {
            parallel {
                stage('hadoop-2.7 jars ') {
                    agent {
                        dockerfile {
                            label 'docker'
                            args '-v ${HOME}/.m2:${HOME}/.m2:rw -v ${HOME}/.sparkStaging:${HOME}/.sparkStaging:rw -v ${HOME}/.ivy2:${HOME}/.ivy2:rw -v ${HOME}/.zinc:${HOME}/.zinc:rw -v /etc/passwd:/etc/passwd:ro'
                        }
                    }
                    steps {
                        updateGitlabCommitStatus(name: 'pipeline', state: 'running')
                        updateGitlabCommitStatus(name: 'run-tests-jenkins', state: 'running')
                        sh './build/mvn -DskipTests --settings=settings.xml -Phadoop-2.7 -Pyarn -Pkubernetes -Pgpuwa deploy'
                    }
                    post {
                        success {
                            updateGitlabCommitStatus(name: 'deploy etl', state: 'success')
                        }
                        failure {
                            updateGitlabCommitStatus(name: 'deploy etl', state: 'failed')
                        }
                    }
                }

                stage('hadoop-3.2 tgz') {
                    agent {
                        dockerfile {
                            label 'docker'
                            args '-v ${HOME}/.m2:${HOME}/.m2:rw -v ${HOME}/.sparkStaging:${HOME}/.sparkStaging:rw -v ${HOME}/.ivy2:${HOME}/.ivy2:rw -v ${HOME}/.zinc:${HOME}/.zinc:rw -v /etc/passwd:/etc/passwd:ro'
                        }
                    }
                    steps {
                        updateGitlabCommitStatus(name: 'pipeline', state: 'running')
                        updateGitlabCommitStatus(name: 'run-tests-jenkins', state: 'running')
                        sh './dev/make-distribution.sh --tgz --name 3.2.0 -Phadoop-3.2 -Pyarn -Pkubernetes'
                    }
                    post {
                        success {
                            updateGitlabCommitStatus(name: 'deploy etl', state: 'success')
                        }
                        failure {
                            updateGitlabCommitStatus(name: 'deploy etl', state: 'failed')
                        }
                    }
                }
            }//end of parallel
        }//end of stage('Build')
    }//end of stages

    post {
        always {
            echo 'cleaning up workspace'
            junit(testResults: '**/surefire-reports/*.xml', allowEmptyResults: 'true')
            addGitLabMRComment(comment: "${BUILD_URL}testReport/")
            deleteDir() /* clean up our workspace */
        }
        success {
            updateGitlabCommitStatus(name: 'pipeline', state: 'success')
            addGitLabMRComment(comment: "Pipeline is complete with no errors.")
            //'#00FF00' is colorCode for Green.
            // notifier("Pipeline successed for MR: ${gitlabMergeRequestIid}", '#00FF00')
        }
        failure {
            echo 'archiving log files'
            archiveArtifacts artifacts: '**/*.log'
            updateGitlabCommitStatus(name: 'pipeline', state: 'failed')
            addGitLabMRComment(comment: "Pipeline is complete with errors.")
            //'#FF0000' is colorCode for Red
            // notifier("Pipeline failed for MR: ${gitlabMergeRequestIid}", '#FF0000')
        }
        // failure condition doesn't trigger on unstable status
        unstable {
            echo 'archiving log files'
            archiveArtifacts artifacts: '**/*.log'
            updateGitlabCommitStatus(name: 'pipeline', state: 'failed')
            addGitLabMRComment(comment: "Pipeline is complete with errors.")
            //'#FFFF00' is colorCode for Yellow.
            // notifier("Pipeline failed for MR: ${gitlabMergeRequestIid}", '#FFFF00')
        }
    }
}

def notifier(message, colorCode){
        slackSend(baseUrl: 'https://nvidia.slack.com/services/hooks/jenkins-ci/',
                                                channel: '#rapidsdev-spark',
                                                message: message + "\n Job Details: ${BUILD_URL}",
                                                tokenCredentialId: 'slack_token',
                                                color: colorCode)
}
