#!/usr/local/env groovy
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
def artifactory_server = Artifactory.server "artifactory"
def buildInfo = Artifactory.newBuildInfo()
buildInfo.env.capture = true

// If this job is triggered manually, these variables aren't created by GitLab plugin.
// Create them manually so that they'll at least be null.
def gitlabMergeRequestIid = gitlabMergeRequestIid ?: null
def gitlabTargetBranch = gitlabTargetBranch ?: null
def gitlabMergeRequestTargetProjectId = gitlabMergeRequestTargetProjectId ?:null
def gitlabMergeRequestTitle = gitlabMergeRequestTitle ?: null
def mergeREF = "merge-requests/${gitlabMergeRequestIid}/merge"

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 6, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'REF',
               defaultValue: '\${gitlabBranch}',
               description: 'Commit to build')
    }

    stages {
        stage('Build & Test') {
            parallel {
                stage('CPU') {
                    steps {
                        build(job: 'spark/sparkmaster_cpu', parameters: [string(name: 'REF', value: mergeREF),
                        string(name: 'GITLAB_MERGE_REQUEST_IID', value: gitlabMergeRequestIid),
                        string(name: 'GITLAB_TARGET_BRANCH', value: gitlabTargetBranch),
                        string(name: 'GITLAB_MERGE_REQUEST_TARGET_PROJECT_ID', value: gitlabMergeRequestTargetProjectId)])
                    }
                }
                // stage('GPU') {
                //     when {
                //         expression { gitlabMergeRequestTitle ==~ ".*\\[GPU].*" }
                //     }
                //     steps {
                //         build job: 'spark/gpu', parameters: [string(name: 'REF', value: REF)],
                //         string(name: 'GITLAB_MERGE_REQUEST_IID', value: gitlabMergeRequestIid),
                //         string(name: 'GITLAB_TARGET_BRANCH', value: gitlabTargetBranch),
                //         string(name: 'GITLAB_MERGE_REQUEST_TARGET_PROJECT_ID', value: gitlabMergeRequestTargetProjectId)])
                //     }
                // }
            }
        }
    }

    post {
        always {
            script {
                artifactory_server.publishBuildInfo buildInfo
            }
        }
    }
}
