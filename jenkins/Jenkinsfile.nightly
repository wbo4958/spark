#!/usr/local/env groovy
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
def artifactory_server = Artifactory.server "artifactory"
def buildInfo = Artifactory.newBuildInfo()
buildInfo.env.capture = true

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 10, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    triggers {
        cron('H 0 * * *')
    }

    parameters {
        string(name: 'REF',
               defaultValue: 'nvmaster',
               description: 'Commit to build')
    }

    stages {
        stage('Build & Test') {
            parallel {
                stage('CPU') {
                    steps {
                        build(job: 'spark/sparkmaster_cpu', parameters: [string(name: 'REF', value: REF), string(name: 'GITLAB_MERGE_REQUEST_IID', value: null),])
                    }
                }
                // stage('GPU') {
                //     steps {
                //         build(job: 'spark/gpu', parameters: [string(name: 'REF', value: REF), string(name: 'GITLAB_MERGE_REQUEST_IID', value: null),])
                //     }
                // }
            }
        }
    }

    post {
        always {
            script {
                artifactory_server.publishBuildInfo buildInfo
            }
        }
        success {
            slack("#swrapids-spark-cicd", "Success", color: "#33CC33")
            build(job: 'spark/sparkmaster_deploy',
                  propagate: false,
                  parameters: [string(name: 'REF', value: REF),
                               string(name: 'COMMIT', value: GIT_COMMIT)])
        }
        failure {
            slack("#swrapids-spark-cicd", "Failed", color: "#FF0000")
        }
        // failure condition doesn't trigger on unstable status
        unstable {
            slack("#swrapids-spark-cicd", "Unstable", color: "#FFFF00")
        }
    }

}

void slack(Map params = [:], String channel, String message) {
    Map defaultParams = [
            color: "#000000",
            baseUrl: "https://nvidia.slack.com/services/hooks/jenkins-ci/",
            tokenCredentialId: "slack_token"
    ]

    params["channel"] = channel
    params["message"] = "${BUILD_URL}\n" + message

    slackSend(defaultParams << params)
}
