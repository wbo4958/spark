/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

pipeline {

    agent {label 'vanilla'}

    triggers {
        cron('H 3 * * *')
    }

    parameters
    {
        string(name: 'SOURCE_BRANCH',
                defaultValue: 'master')

        string(name: 'TARGET_BRANCH',
                defaultValue: 'nvmaster')
        
        string(name: 'REF',
                defaultValue: 'nvmaster')

    }

    
    stages {

        stage('Update Branch') {
            when { expression { "${params.TARGET_BRANCH}" != "${params.SOURCE_BRANCH}" } }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId:'svcngcc_pubpriv', keyFileVariable: 'SSH_KEY_FILE_PATH')]) {
                    withEnv(["GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no -i ${env.SSH_KEY_FILE_PATH}"]) {
                        script {
                            List<String> sourceChanged = sh(returnStdout: true, script: "git diff --name-only origin/${params.SOURCE_BRANCH}..origin/${params.TARGET_BRANCH}").split()
                            echo "Changed files: ${sourceChanged}"
                            if (sourceChanged.size()>0) {
                                sh 'git fetch --all'
                                sh "git checkout ${params.TARGET_BRANCH}"
                                sh "git pull origin ${params.TARGET_BRANCH}"
                                sh "git merge origin/${params.SOURCE_BRANCH}"
                                sh "git push origin ${params.TARGET_BRANCH}"
                            }
                            else{
                                echo 'Everything is up to date.'
                            }
                        }
                    }
                }
            }
        }   
    }
    
    post {
        always {
            echo 'cleaning up workspace'
            deleteDir() /* clean up our workspace */
        }
        failure {
            //'#FF0000' is colorCode for Red
            notifier("master failed to merged into nvmaster", '#FF0000')
        }
        // failure condition doesn't trigger on unstable status
        unstable {
            //'#FFFF00' is colorCode for Yellow.
            notifier("master failed to merged into nvmaster", '#FFFF00')
        }
    }
}

def notifier(message, colorCode){
        slackSend(baseUrl: 'https://nvidia.slack.com/services/hooks/jenkins-ci/',
                                                channel: '#rapidsdev-spark',
                                                message: message + "\n Job Details: ${BUILD_URL}",
                                                tokenCredentialId: 'slack_token',
                                                color: colorCode)
}
